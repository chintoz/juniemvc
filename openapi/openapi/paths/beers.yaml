get:
  tags:
    - Beer
  summary: Get beers with optional filtering and pagination
  description: "Retrieves a paginated list of beers with optional filtering by name."
  operationId: getBeers
  security:
    - api_key: []
  parameters:
    - name: beerName
      in: query
      description: Filter beers by name (case-insensitive, partial match)
      required: false
      schema:
        type: string
    - name: page
      in: query
      description: Page number (0-based)
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    - name: size
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        default: 20
        minimum: 1
    - name: sortField
      in: query
      description: Field to sort by
      required: false
      schema:
        type: string
        default: "id"
        enum: ["id", "beerName", "beerStyle", "price", "quantityOnHand", "createdDate", "updateDate"]
    - name: sortDirection
      in: query
      description: Sort direction
      required: false
      schema:
        type: string
        default: "ASC"
        enum: ["ASC", "DESC"]
  responses:
    '200':
      description: "Successfully retrieved the paginated list of beers"
      content:
        application/json:
          schema:
            $ref: '../components/schemas/PagedBeerResponse.yaml'
    '400':
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              message:
                type: string
                example: "Bad request"

post:
  tags:
    - Beer
  summary: Create a new beer
  description: "Creates a new beer with the provided data."
  operationId: createBeer
  security:
    - api_key: []
  requestBody:
    description: "Beer data to create a new beer"
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/Beer.yaml'
        example:
          beerName: "Sierra Nevada Pale Ale"
          beerStyle: "PALE_ALE"
          upc: "0631234200043"
          quantityOnHand: 150
          price: 13.99
  responses:
    '201':
      description: "Successfully created a new beer"
      content:
        application/json:
          schema:
            $ref: '../components/schemas/Beer.yaml'
          example:
            id: 3
            version: 1
            beerName: "Sierra Nevada Pale Ale"
            beerStyle: "PALE_ALE"
            upc: "0631234200043"
            quantityOnHand: 150
            price: 13.99
            createdDate: "2025-07-19T00:34:00Z"
            updateDate: "2025-07-19T00:34:00Z"
    '400':
      description: "Invalid beer data provided"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 400
              message:
                type: string
                example: "Validation failed"
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string
                example:
                  - field: "beerName"
                    message: "Beer name is required"